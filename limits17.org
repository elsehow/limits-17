:frontmatter:
#+options: toc:nil
#+LaTeX_CLASS: acmart
#+LATEX_HEADER: \usepackage{epigraph}
#+LATEX_HEADER: \input{authors}
#+LATEX_HEADER: \setcopyright{rightsretained}
#+LATEX_HEADER: \acmDOI{10.475/123_4}
#+LATEX_HEADER: \acmISBN{123-4567-24-567/08/06}
#+LATEX_HEADER: \acmConference[LIMITS '17]{ACM Limits Workshop}{June 2017}{Santa Barbara, California USA} 
#+LATEX_HEADER: \acmYear{2017}
#+LATEX_HEADER: \copyrightyear{2017}
#+LATEX_HEADER: \acmPrice{15.00}
#+TITLE: Better Not to Know? 
#+Author: 
#+SUBTITLE: The SHA1 Collision & the Limits of Polemic Computation
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="style1.css" />
:end:

#+BEGIN_EXPORT latex
\epigraph{I insist on the fact that there is generally no growth but only a luxurious squandering of energy in every form!}{Georges Batailles, \textit{The Accursed Share}}
#+END_EXPORT

* Introduction

From protein folding to the discovery of novel drugs,
large computes can find valuable answers to important questions
cite:Anderson2004.
They also invariably enter into sociotechnical discourses,
becoming inexorably intertwined in the politics, economics and epistemologies 
of particular fields, disciplines and institutions cite:Ames2015.

This paper reads the SHA1 collision compute (Section 2), and the various sociotechnical entanglements that motivated its performance (as opposed to discussion) (Section 3),
to motivate a theory of /polemic computation/ (Section 4), 
computations that work to enter into sociotechnical discourses
by virtue of the ``feat'' of having computed a particular result,
rather than by virtue of the specific result computed.
In the case of the SHA1 compute, researchers took on a sizeable monetary and environmental cost
to enforce a point of view among specific stakeholders in the (social, political) economy of SSL certificates.
In so doing, the compute's aims are animated by
larger narratives of authenticity, privacy and security on the Internet.
# This paper focuses on computes in which the particular answer computed
# takes a back seat to the ``feat'' of having performed the computation at all.

Polemic computes, even important ones, weigh political and social goals against ecological (and other) costs.
Of course, so do all other computes: all computation enters into sociotechnical entanglement, commitments.
This paper does not claim that polemic computes are better or worse than any other class of computes. 
Rather, this paper raises an ethical question about the limits within polemic computes must work.
Given the resources that feats require, and their symbolic nature,
when should they be resisted, so that the resources consumed could be put to other endeavors? When should they be embraced?
I conclude with how this debate might carry forward in various applications ranging from distributed computing to web applications and machine learning (Section 6).


* Background


Before discussing Google's large compute in depth,
this section gives some background on SHA1, and cryptographic hash functions in general.
Cryptographic hash functions are ``one way'' functions: 
they take some data, and produce some new data, such that the original data cannot be recovered from the new data. The output of the hash function is simply called a /hash/.

# https://www.schneier.com/blog/archives/2005/02/cryptanalysis_o.html
SHA1 is one cryptographic hash function, designed by the NSA in the early 1990s.
For some block of any-sized data, SHA1 produces a 40-digit string of characters.
It is used in most version control applications to refer uniquely to files. SHA1 may also be used to check for corrupted files. 
Crucially, as I will discuss in Section 3, SHA1 is also used in security-oriented protocols such as SSH/TLS.


** SHA1 collisions

The hashes output by SHA1 are typically 40 digits, regardless of the size of the input data.
Crucially, hashes /should/ relate uniquely to input data: 
two different inputs should never produce the same hash (even though hashes are much smaller than the original data).
A /collision/ refers to the breakdown of this property,
in which two different input data produce identical hashes.

Collisions break several common uses of SHA1. 
Amusingly, a test in the WebKit browser engine's source code
broke the version control system used for that repository cite:Koivisto2017.
Subversion, which WebKit's repository relies on, uses SHA-1 hashes to refer uniquely to source code files.
A test aimed at capturing the SHA-1 collision incidentally included two different files with the same hash, 
causing a break in the repository software, which temporarily halted development.
(Git sidesteps this issue by using an additional code  attached to the SHA-1 hash cite:Torvalds2017).

In the case of SSL/TLS, the protocol for encrypted and authenticated communication on the web, SHA1 collisions could have even more severe consequences;
namely, breaks to authenticity and/or security in web connections.
Section 5 will return to TLS vulnerability in more detail.

** SHA1 collisions in theory

In discussing the safey of particular hash functions, two questions must be asked:
(1) how long would it take to find a collision by brute force?, and 
(2) is there any algorithm that allows us to find a collision faster than the brute force method?
For the brute force method, the odds of finding a SHA1 collision by chance are one/2^80
cite:Schneier2005.
In general, the security of this brute-force attack is judged relative to the outer edge of high-end hardware, and hash functions are expected to be retired in time, as computers grow more powerful.
However, this 2^80 space of possibilities in the search for a collision is not considered feasible, so SHA1 appears safe.

In 2005, however, Wang, Yin & Yu found an algorithm to produce SHA1 collisions in under 2^69 calculations (about 2,0000 times faster than the brute force approach)
cite:Wang2005.
(It is worth noting that other work had suggested possible weaknesses of SHA1 earlier cite:Biham2005).
While such a compute was, at the time, outside the limits of even powerful adversaries,
the result caused concern among cryptographers cite:Schneier2005.
By 2011, a 2^61 calculation attack was discovered cite:Stevens2013a,
and by the mid 2010s, the developers of most major browsers had announced plans to stop accepting SHA1 SSL certificates 
cite:Mozilla2017,Sleevi2014.


* Performing a Collision

The study in question here produced two PDFs with different content, but identical SHA1 hashes
cite:Stevens2017.
the study in question performed a SHA collision in 2^63.1 computations, 
and released the source code for replicating the attack
cite:Stevens2017github.

Compared to the 2^61 theoretical attack, the practical attack took a bit longer due to the communication overhead required to coordinate computations across several datacenters, and due to the relative inefficiency of using GPUs rather than CPUs.
In practice, the computation required to produce the SHA1 collision required 6,500 years of CPU time and 110 years of GPU time. While this number certainly sounds high, 600,000 cores, each running two threads, could take only two days of compute time.

Of course, time is not the only cost to consider.
Computation is material, physically instantiated, and has ecological consequences.
Beyond monetary cost, such large computations have very real costs in energy.
Since the implementation details of the infrastructures used for the large collision compute are not entirely knowable from the paper,
it is difficult to estimate this energy cost.
As a rough point of comparison, the monetary cost of such a compute on Cray supercomputers would be on the order of one million USD 
(though such estimates might vary widely in either direction from system to system)
cite:Pautsch2016.
In any case, such a figure is a tiny sliver of Alphabet Inc.'s 90 billion USD revenue in 2016.

This section gave background on SHA1 collisions, 
and gave context for the costs (in time and energy) of the SHA1 collision compute.
The following section details possible explanations for why the computation was performed
in practice, rather than simply discussed in theory.


* Explaining why the compute happened

#+ATTR_LATEX: :float multicolumn
#+caption: Proportion of internet users by browser (left), and proprotion of browser usage with plans to block SHA-1 certicates (right). A majority of browsers had already announced plans to deprecate SHA-1 certificates, even before the collision was demonstrated. However, some older browsers have continued to accept these certificates.
[[./figures/browser-share.png]]

Since a theoretical result already existed showing a SHA1 collision was possible, 
one might rightly wonder why researchers would go through a great deal of time and effort
(not to mention a great deal of expense, both monetary and ecological)
to produce artifacts of no practical purpose (different PDFs with identical checksums).
What are the possible benefits?

In this section I argue that
the SHA1 collision compute had essentially polemic goals.
It was performed not to know a particular answer
(as the PDFs themselves are not useful as artifacts), 
but to know that such an answer /has/ been found,
as opposed to /can/ be found.
I argue that the performance of this collision compute
was necessarily entangled in a particular sociotechnical discourse,
and aimed to change opinions and behavior among specific groups of stakeholders.
This section focuses in particular on those involved in the ecosystem of SSL certificates: browsers, webmasters, and the certificate authorities (CAs) tasked with generating certificates.

** Practice versus theory

Before progressing onto a discussion of this compute on the ecosystem of SSL certificates,
we must briefly argue for why an argument of academic interest does not sufficiently explain why this compute was performed, rather than simply discussed.

The computation here ended up being more difficult than theoretical results indicated due to the storage and communication requirements necessary to perform the work across multiple datacenters. 
The collision compute reveals details relevant
to knowing how realistic the threat is in practice. 
Of course, given that SHA1 has already been widely deprecated, this explanation does not in itself answer why such an exercise was considered necessary.
After all, one would not need to know the cost in practice of such an exercise without some reason.

Indeed, one reason, aside from the particular answer computed, is that the compute raises a question and challenge to users of SHA1:
``Do SHA1 users have assets worth at least as much as the cost of this compute?''
All cryptography can be broken with sufficient computational time.
This result shows that a powerful attack (such as Google) can indeed break SHA1 with some knowable resources.
And, surely, if Google can perform such an attack, a government actor could do so as well.
# Cybersecurity practice depends on navigating the costs and benefits for adversaries, and their presumed resourcefulness

Of course, some users of SHA1 did not care much about the demonstrated attack.
Linus Torvalds, developer of the Git version control software (which relies on SHA1 to refer to files), reported no immediate concern.
``Do we want to migrate to another hash? Yes. Is it 'game over' for SHA1 like people want to say? Probably not.'' cite:Torvalds2017.
The following section explains the performance of this collision in the context of 
an application in which stakes are potentially much higher:
the issuance of SSL certificates, some of which rely on SHA1 to provide cryptographic guarantees.

** SHA1 and SSL Certificates

#+ATTR_LATEX: :placement [t!]
#+caption: The distribution of SSL certificates on the web, by certificate authority (CA). While a few CAs lead in market share, a large number of smaller CAs issue a smaller proportion of certificates. Compared to the relatively more centralized market of browser share (Figure 1), this market fragmentation makes enforcement more difficult, as coordination and consensus must be acheived over a larger number of stakeholders.
[[./figures/ca-share.png]]

SHA1 is also used in the issuance of (especially older) SSL certificates.
(SSL certificates
provide a token of the authenticity of a user's connection to a webpage,
and encrypts data end-to-end).
This practical result showed that someone with the power to perform a SHA1 collision could
now make a fake certificate for a website with that uses SHA1 for nerits TLS.
Such a false certificate could
be used to convince a victim that they are communicating with a given website,
when in fact they are communicating with the attacker.

SSL certificates are issued by Certificate Authorities (CAs), which in theory abide by 
regulations set by the CA/Browser Forum, a standards-setting body.
Here unravels a more complex story of regulation and standards bodies,
as well as stakeholders for whom a change away from SHA1 could incur significant monetary costs.
The following sections examine the polemic impact of this attack on both CAs, and browser developers. 

*** Certificate authorities

First, the SHA1 attack can be mediated entirely by
replacing old SHA1 certificates with newer ones using SHA-2 or SHA-3.
Second, CAs that abide by CA/Browser Forum rules are already forbidden from issuing SHA1 certificates. (They are additionally required to insert at least 64 bits of randomness, in an effort to mitigate devastating effects from future cryptographic breaks) cite:Stevens2017.

However, Since CAs are decentralized, and since SSL issues (website administrators) do not routinely check issued SSL certificates for these properties, enforcing these regulations is a perennial challenge for the CA/Browser Forum. It is not clear that CAs were abiding by either of these rules.
There exists a long tail of small certificate authorities (Figure 1), in comparison to the relative centralization of browser production (Figure 2) cite:Q-Success2017.
Assuming they were not, one explanation for performing this compute is that doing so would encourage CAs (and webmasters) to take more seriously the threat posed by SHA1,
putting some real pressure on them by freely releasing code that could result in forged certificates cite:Stevens2017github.

In effect, the very existence of an exploit makes CAs who continue not to abide by CA/F rules more liable.
Thus, this rather costly collision compute worked to an extent as an agent of enforcement,
``correcting'' (that is, enforcing a perspective upon) CAs in ways existing standards bodies were unable to do.


*** Browser developers

Alongside the issue of enforcing proper security practices on a decentralized system of certificate authorities, 
a separate ecosystem of browser developers exercises independent authority to accept, or reject, certificates issued by CAs.
While browser production is also decentralized, it is less so than CAs (Figure 2)
cite:Buckler2016.
 
According to these statistics, the majority of browsers on the web had already agreed to stop accepting SHA1 SSL certificates,
even before this compute took place
cite:Sleevi2014,Mozilla2017.
So, regardless of what certificate authorities do, users of these browsers would have been protected from any vulnerabilities in SHA1, 
and the CAs would have faced additional market pressure to move away from SHA1.

If the performance of the collision compute was not necessary to change behaviors among browser developers
(and thus to protect users),
why was it performed?
One explanation may come from the press room.
Browser developers such as Mozilla and Google have received criticism for their decision to reject SHA1 certificates, even from other industry leaders such as Facebook cite:Stamos2015, given the still-theoretical nature of the hash's vulnerability
Thus, another dimension of this compute's polemic aims
relates to browser PR, undercutting claims that the decision to deprecate SHA1 was premature.
Crucially, browsers has a vested interest in security:
browsers need their users to feel secure, as customers will flee if they do not feel safe shopping and communicating on the Internet.
# While CA/B Forum had already agreed to deprecate SHA1 for new certificates, it definitely bolsters the public position that Google had already taken 
# that we should move away from trusting this algorithm. Firefox was, without any knowledge of this research, moving to mark SHA1 certs as insecure, 
# but it'll help Mozilla on the pushback they may receive about that decision. Articles continued to be written about whether Google and others were right in 
# taking a hard line position against SHA1, and "we showed an actual collision" is a strong piece of evidence for that debate. I don't know that it'll 
# persuade people who had economic reasons for hoping we could continue SHA1 certificate distribution for another year or whatever, 
# but it certainly helps in the blogosphere/newsroom debate.


* The polemics of actually doing

The prior section gave sociotechnical context for the performance of the SHA1 collision compute,
giving many explanations across a wide variety of contexts.
However, as of now, we lack a theory for systematically typifying these disparate explanations.
In this section, I propose a definition of /polemic computation/ to describe motivations for performing computes such as those above (Section 5.1).
Namely, we propose that some computation is performed because there is a polemic power to doing so, 
and that the material resources expended on such a computation take agency in particular sociotechnical debates.
We tie this theory to that of charismatic technology (Section 5.2)
and to critical design (Section 5.3)
in centering the material nature of performed computation
in describing its agential power in sociotechnical discourses.

** Defining polemic computation

This paper defines /polemic computation/ 
as a computation enacted (rather than discussed)
in order to forward an argument or ideology.
Crucially, computations are material artifacts, 
produced in time and energy 
cite:Dourish2011a.
Their performance or enactment also requires 
specialized technical expertise in the form of labor.
Polemic computes are at once feats and artifacts, which act cite:Ames2015 
in sociotechnical debates.
The following sections relate this theory of polemic computations
to other theories of charismatic technology and critical design,
highlighting the relevant differences to our theories.

** Charismatic technology

Polemic computation can be said to ``work'' in part 
because it is animated by ideological frameworks.
In the case of the SHA1 computation,
ideals that web communications /should/ be private and authenticated
very much animate the particular computations that occurred.
These ideals become especially clear when one examines the motivations for actually performing the compute,
even though they were already discussed in theory.

In this way, polemic computation draws strongly from Ames' theory of /charismatic technology/
cite:Ames2015.
Drawing on actor-network theory, charismatic technology would ascribe the very artifact of the computation
(a material artifact produced by material means cite:Dourish2011a,,Bennett2013a)
agency in the technosocial discourses around privacy and security.
Much like in Ames case of the One Laptop Per Child project,
polemic computation aims to change behavior and beliefs among specific stakeholders in specific debates.

As with charisma,
power is central to polemic computing.
Here, power plays in through the resources required to perform the compute.
However, in contrast to charismatic technology, polemic computation 
centers the material act of computing as a /feat/ with costs in time and energy.
In energy, computation expends valuable and scarce ecological resources cite:SixSilberman2015.
In time and energy, computational incurs opportunity costs, through answers that could have been computed but were not.

Rather than computing answers, polemic computation uses the material feat of expenditure 
to work as an agent in technosocial discourse.
Indeed, the SHA1 collision demonstrated an attack feasible only for highly resourceful actors (for now). 
Such actors might be a government or, apparently, Google.
Thus, this collision demonstrated not only the considerable resources required to exploit SHA1,
but the vast resources that Google must have, if it is able to spend so heavily on a project with essentially polemic aims.

** Critical design

Another strand of research that explicitly centers the agency of technological artifacts
is critical design cite:Dunne2001.
Critical design seeks to harness the agency of technical artifacts 
to challenge assumptions or surface lurking cultural narratives.
In many ways, polemic computation serves as a critical artifact.
The SHA1 collision compute, for example, 
called out the poor security practices of many certificate authorities.
Specifically, the material production of the computation,
combined with its almost satirical nature (the compute produced PDFs),
acted to /define/ what is and is not a poor security practice for certificate authorities.
Much in the tradition of critical design
used its material power cite:Bennett2013a along with a touch of humor, to enter into technosocial debates and imaginaries.


* TODO final section

complicate the theory using cryptocurrencies as a counterpoint

** describe how cryptocurrencies e.g. bitcoin work


** on one hand, compute intrinsic to value
# Bitcoin uses "proof of work" to validate monetary transactions,
# but the product of the work itself is useless only the fact that the work was
# done matters. 
# This seems to fit right in the definition of polemic computing,
# but then doesn't because it is necessary for bitcoin to function.

** on the other, polemic dimension 
raising q's/making points about currency itself
trace cipherpunks and its political/technical/social/epistemological commitments

** raise how lines can be blurred
and why this is such a gr8! avenue for future work!!!

* TODO Discussion

# What is the opposite of a polemic computation? A computation "for the best"? For whose best? Don't many (even all) computations enter socio-technical discourses? For example, the search for novel drugs is inextricably tied up in the economics of big pharma, the question of whether all diseases should be treated, the allocation of resources to conditions affecting very few people, perhaps away from treatments that would impact many. The literature on the social construction of technology may be relevant.

# To deeply understand what the SHA1 computation was performed, it would seem valuable to interview the people who conducted and approved the use of computation for this purpose. What do they say about why it was performed? 

* Conclusion

Using the example of a particular large-scale compute,
this paper highlights broader tensions about when and when not to compute.
In the case of polemic computation, the social rewards are always unclear.
Future work should consider broadly what we can we do to hedge our risks, 
not just in time and capital,
but in ecological cost.
We will only have more things to compute,
and more things to compute them with,
but how to select which to expend our increasingly precious resources on, 
how to use restraint?


* Acknowledgements
Thanks to Morgan Aimes, Nick Doty, Anette Greiner, Sebastian Benthall and John Chuang for their comments and conversations. Many thanks to Donald Patterson and Ellen Zegura for their very helpful reviews.

\bibliographystyle{ACM-Reference-Format}
\bibliography{refs}

* Reviews
I have mixed feelings about this paper because on the one hand I feel like it
made me think about an interesting issue:  Is there an ethical dimension to the
use of computation resources to accomplish a "feat"?  The paper could use a substantial revision and
tightening of its argument around this point.

A few ideas that came up that complicated the idea was "proof of work"
computations.   
Bitcoin uses "proof of work" to validate monetary transactions,
but the product of the work itself is useless only the fact that the work was
done matters. 
This seems to fit right in the definition of polemic computing,
but then doesn't because it is necessary for bitcoin to function.

Secondly, why is the feat not valuable if it "only" promotes a sociotechnical
discourse.   If that is necessary to push security past SHA1, why is that not as
important as trying to generate a new synthetic drug.  There is something that
at first glance seems useless about the SHA1 computation, that upon more
reflection seems not to hold up. The fact that Google devoted resources to it
actually makes the argument that it was worthwhile.  It at least seems more
worthwhile than calculating more digits of PI.

This paper proposes that some computation is "polemic", meaning that the computation is performed primarily to "enter into sociotechnical discourses" or "forward an argument or ideology" rather than for another set of reasons that I don't find concisely articulated but are exemplified by the author via protein folding and discovering novel drugs. The recent SHA1 collision computation is given as an example. A nascent theory of polemic computation is proposed, and the question of when and when not to compute is brought to the forefront.

I have concerns about many details of the paper, and I suspect these would come up in discussion. If the author could address some of them in a revision, then perhaps the discussion could be more focused on the most interesting ideas.

.....ADD TO DISCUSSION, FUTURE WORK.....

You seem to have in mind a hierarchy of better and worse reasons to conduct computation. Do you? If so, what is it? Is it appropriate to have a hierarchy?

# The examples in Section 6 seem to focus on energy consumption. What are the other considerations in deciding on where computation takes place (as come through in 6.1 and 6.2)? I did not understand your example in Section 6.3. You may need more explanation of benchmarks, algorithm architectures, neural net training, to allow a general CS audience to appreciate your point.

